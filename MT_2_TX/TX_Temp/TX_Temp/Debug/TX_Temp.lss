
TX_Temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000a08  00000a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010c  0080010c  00000aa8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b78  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5c  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092f  00000000  00000000  000031e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00003b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068b  00000000  00000000  00003e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea8  00000000  00000000  000044c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000536b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  9e:	0c 94 02 05 	jmp	0xa04	; 0xa04 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_rf>:
	}
	return 0;
}

nRF24L01 *setup_rf(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
  aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <nRF24L01_init>
  ae:	ec 01       	movw	r28, r24
	rf->ss.port = &PORTB;
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	88 83       	st	Y, r24
	rf->ss.pin = PB2;
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PB1;
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	2d 83       	std	Y+5, r18	; 0x05
	rf->sck.port = &PORTB;
  c4:	9f 83       	std	Y+7, r25	; 0x07
  c6:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PB5;
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
  cc:	9a 87       	std	Y+10, r25	; 0x0a
  ce:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PB3;
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
  d4:	9d 87       	std	Y+13, r25	; 0x0d
  d6:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PB4;
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e 87       	std	Y+14, r24	; 0x0e
	EICRA |= _BV(ISC01);
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	EIMSK |= _BV(INT0);
  e6:	e8 9a       	sbi	0x1d, 0	; 29
	nRF24L01_begin(rf);
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <nRF24L01_begin>
	return rf;
}
  ee:	ce 01       	movw	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <setup_timer>:

void setup_timer(void)
{
	TCCR1B |= _BV(WGM12);				// CTC Mode
  f6:	e1 e8       	ldi	r30, 0x81	; 129
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);				// COMP Interrupt
 100:	af e6       	ldi	r26, 0x6F	; 111
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	8c 91       	ld	r24, X
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8c 93       	st	X, r24
	OCR1A = 15624;						// 16 MHz/1024
 10a:	88 e0       	ldi	r24, 0x08	; 8
 10c:	9d e3       	ldi	r25, 0x3D	; 61
 10e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 112:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= _BV(CS10) | _BV(CS12);	// Prescalar 1024
 116:	80 81       	ld	r24, Z
 118:	85 60       	ori	r24, 0x05	; 5
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <UART_TX>:
}

// UART transmission function
void UART_TX(char *data)
{
 11e:	dc 01       	movw	r26, r24
	while(!(UCSR0A & (1 << UDRE0)));	// Wait for UART to be available
 120:	e0 ec       	ldi	r30, 0xC0	; 192
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <UART_TX+0x6>
	UDR0 = *data;						// Send the data	
 12a:	8c 91       	ld	r24, X
 12c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 130:	08 95       	ret

00000132 <main>:
volatile bool rf_interrupt = false;
volatile bool send_message = false;
volatile char ADCvalue;

int main(void)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	ae 97       	sbiw	r28, 0x2e	; 46
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
	// Variables
	uint8_t i = 0;				// Iterative variable
	char temp[5];				// Temperature string buffer
	char LF = '\n';				// Line feed
 146:	8a e0       	ldi	r24, 0x0A	; 10
 148:	8e 83       	std	Y+6, r24	; 0x06
	DDRC = (1 << 5);
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	87 b9       	out	0x07, r24	; 7
	
	// NRF Settings
	uint8_t to_address[5] = {0x02, 0x04, 0x06, 0x08, 0x0A};		// Device address
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	e6 e0       	ldi	r30, 0x06	; 6
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	de 01       	movw	r26, r28
 156:	17 96       	adiw	r26, 0x07	; 7
 158:	01 90       	ld	r0, Z+
 15a:	0d 92       	st	X+, r0
 15c:	8a 95       	dec	r24
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x26>
	sei();						// Global interrupt enabled
 160:	78 94       	sei
	nRF24L01 *rf = setup_rf();	// Initialize the NRF
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_rf>
 166:	6c 01       	movw	r12, r24
	setup_timer();
 168:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup_timer>
	
	// ADC Settings
	ADMUX = 0;					// Use ADC0
 16c:	ec e7       	ldi	r30, 0x7C	; 124
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);		// AVcc is reference with ARef connected to external capacitor
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// 16 MHz with prescalar of 128
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	87 60       	ori	r24, 0x07	; 7
 180:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);		// Enable auto trigger
 182:	80 81       	ld	r24, Z
 184:	80 62       	ori	r24, 0x20	; 32
 186:	80 83       	st	Z, r24
	ADCSRB = 0;					// Free running settings for auto trigger
 188:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ADCSRA |= (1 << ADEN);		// Enable ADC
 18c:	80 81       	ld	r24, Z
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);		// Start conversion
 192:	80 81       	ld	r24, Z
 194:	80 64       	ori	r24, 0x40	; 64
 196:	80 83       	st	Z, r24
	
	// UART Settings
	UBRR0H = ((MYUBRR) >> 8);	// Set baud rate for UPPER Register
 198:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = MYUBRR;			// Set baud rate for LOWER Register
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A |= (1 << U2X0);		// Double UART transmission speed
 1a2:	e0 ec       	ldi	r30, 0xC0	; 192
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);		// Enable transmitter
 1ac:	e1 ec       	ldi	r30, 0xC1	; 193
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);	// Frame: 8-bit Data and 1 Stop bit
 1b6:	e2 ec       	ldi	r30, 0xC2	; 194
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	86 60       	ori	r24, 0x06	; 6
 1be:	80 83       	st	Z, r24
	
	while (1)
	{	
		// ADC Conversion
		while((ADCSRA & (1 << ADIF)) == 0);		// Wait for ADC conversion
 1c0:	0a e7       	ldi	r16, 0x7A	; 122
 1c2:	10 e0       	ldi	r17, 0x00	; 0
		ADCvalue = (ADC >> 1);						// Assign the temperature
 1c4:	0f 2e       	mov	r0, r31
 1c6:	f8 e7       	ldi	r31, 0x78	; 120
 1c8:	ef 2e       	mov	r14, r31
 1ca:	f1 2c       	mov	r15, r1
 1cc:	f0 2d       	mov	r31, r0
			nRF24L01Message msg;				// Message structure to be transmitted
			i = 0;								// Reset iterative variable
			itoa(ADCvalue, temp, 10);			// Convert integer value into ASCII
			
			// Transmit the temperature to terminal [NULL terminated]
			while(temp[i] != 0)
 1ce:	91 2c       	mov	r9, r1
 1d0:	a1 2c       	mov	r10, r1
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);	// Frame: 8-bit Data and 1 Stop bit
	
	while (1)
	{	
		// ADC Conversion
		while((ADCSRA & (1 << ADIF)) == 0);		// Wait for ADC conversion
 1d2:	f8 01       	movw	r30, r16
 1d4:	80 81       	ld	r24, Z
 1d6:	84 ff       	sbrs	r24, 4
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <main+0xa0>
		ADCvalue = (ADC >> 1);						// Assign the temperature
 1da:	f7 01       	movw	r30, r14
 1dc:	80 81       	ld	r24, Z
 1de:	91 81       	ldd	r25, Z+1	; 0x01
 1e0:	96 95       	lsr	r25
 1e2:	87 95       	ror	r24
 1e4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ADCvalue>
		
		// Check if the message has been successfully transmitted
		if(rf_interrupt)
 1e8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <rf_interrupt>
 1ec:	88 23       	and	r24, r24
 1ee:	51 f0       	breq	.+20     	; 0x204 <main+0xd2>
		{
			rf_interrupt = false;
 1f0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rf_interrupt>
			int success = nRF24L01_transmit_success(rf);
 1f4:	c6 01       	movw	r24, r12
 1f6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <nRF24L01_transmit_success>
			if(success != 0)
 1fa:	89 2b       	or	r24, r25
 1fc:	19 f0       	breq	.+6      	; 0x204 <main+0xd2>
			nRF24L01_flush_transmit_message(rf);
 1fe:	c6 01       	movw	r24, r12
 200:	0e 94 cd 01 	call	0x39a	; 0x39a <nRF24L01_flush_transmit_message>
		}
		
		if(send_message)
 204:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 208:	88 23       	and	r24, r24
 20a:	19 f3       	breq	.-58     	; 0x1d2 <main+0xa0>
		{
			send_message = false;				// Reset message flag
 20c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
			nRF24L01Message msg;				// Message structure to be transmitted
			i = 0;								// Reset iterative variable
			itoa(ADCvalue, temp, 10);			// Convert integer value into ASCII
 210:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ADCvalue>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 214:	4a e0       	ldi	r20, 0x0A	; 10
 216:	be 01       	movw	r22, r28
 218:	6f 5f       	subi	r22, 0xFF	; 255
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 cd 04 	call	0x99a	; 0x99a <__itoa_ncheck>
			
			// Transmit the temperature to terminal [NULL terminated]
			while(temp[i] != 0)
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	88 23       	and	r24, r24
 226:	c1 f0       	breq	.+48     	; 0x258 <main+0x126>
 228:	89 2d       	mov	r24, r9
 22a:	9a 2d       	mov	r25, r10
 22c:	b1 2c       	mov	r11, r1
			{
				UART_TX(&temp[i]);				// Sends temperature to terminal
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	2c 0f       	add	r18, r28
 234:	3d 1f       	adc	r19, r29
 236:	82 0f       	add	r24, r18
 238:	93 1f       	adc	r25, r19
 23a:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_TX>
				i++;							// Size of the temperature string
 23e:	b3 94       	inc	r11
			nRF24L01Message msg;				// Message structure to be transmitted
			i = 0;								// Reset iterative variable
			itoa(ADCvalue, temp, 10);			// Convert integer value into ASCII
			
			// Transmit the temperature to terminal [NULL terminated]
			while(temp[i] != 0)
 240:	8b 2d       	mov	r24, r11
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	e1 e0       	ldi	r30, 0x01	; 1
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	e8 0f       	add	r30, r24
 24e:	f9 1f       	adc	r31, r25
 250:	20 81       	ld	r18, Z
 252:	21 11       	cpse	r18, r1
 254:	ec cf       	rjmp	.-40     	; 0x22e <main+0xfc>
 256:	01 c0       	rjmp	.+2      	; 0x25a <main+0x128>
		
		if(send_message)
		{
			send_message = false;				// Reset message flag
			nRF24L01Message msg;				// Message structure to be transmitted
			i = 0;								// Reset iterative variable
 258:	b1 2c       	mov	r11, r1
			while(temp[i] != 0)
			{
				UART_TX(&temp[i]);				// Sends temperature to terminal
				i++;							// Size of the temperature string
			}
			UART_TX(&LF);						// Line feed
 25a:	ce 01       	movw	r24, r28
 25c:	06 96       	adiw	r24, 0x06	; 6
 25e:	0e 94 8f 00 	call	0x11e	; 0x11e <UART_TX>
			
			// NRF Transmission
			msg.length = i + 1;							// Save the length of the temperature string
 262:	b3 94       	inc	r11
 264:	be a6       	std	Y+46, r11	; 0x2e
			memcpy(msg.data, temp, msg.length);			// Copy the string into the struct
 266:	4b 2d       	mov	r20, r11
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	be 01       	movw	r22, r28
 26c:	6f 5f       	subi	r22, 0xFF	; 255
 26e:	7f 4f       	sbci	r23, 0xFF	; 255
 270:	ce 01       	movw	r24, r28
 272:	0e 96       	adiw	r24, 0x0e	; 14
 274:	0e 94 c4 04 	call	0x988	; 0x988 <memcpy>
			nRF24L01_transmit(rf, to_address, &msg);	// Transmit the temperature
 278:	ae 01       	movw	r20, r28
 27a:	44 5f       	subi	r20, 0xF4	; 244
 27c:	5f 4f       	sbci	r21, 0xFF	; 255
 27e:	be 01       	movw	r22, r28
 280:	69 5f       	subi	r22, 0xF9	; 249
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	c6 01       	movw	r24, r12
 286:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <nRF24L01_transmit>
 28a:	a3 cf       	rjmp	.-186    	; 0x1d2 <main+0xa0>

0000028c <__vector_11>:
	while(!(UCSR0A & (1 << UDRE0)));	// Wait for UART to be available
	UDR0 = *data;						// Send the data	
}

ISR(TIMER1_COMPA_vect)
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
	send_message = true;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	PORTC ^= (1 << 5);
 2a0:	98 b1       	in	r25, 0x08	; 8
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	89 27       	eor	r24, r25
 2a6:	88 b9       	out	0x08, r24	; 8
}
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__vector_1>:

ISR(INT0_vect)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	8f 93       	push	r24
	rf_interrupt = true;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rf_interrupt>
 2c8:	8f 91       	pop	r24
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 2d4:	fc 01       	movw	r30, r24
 2d6:	a6 2f       	mov	r26, r22
 2d8:	b7 2f       	mov	r27, r23
 2da:	9c 01       	movw	r18, r24
 2dc:	2b 5f       	subi	r18, 0xFB	; 251
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	91 91       	ld	r25, Z+
 2e2:	9d 93       	st	X+, r25
 2e4:	e2 17       	cp	r30, r18
 2e6:	f3 07       	cpc	r31, r19
 2e8:	d9 f7       	brne	.-10     	; 0x2e0 <copy_address+0xc>
 2ea:	08 95       	ret

000002ec <nRF24L01_init>:
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 a3 03 	call	0x746	; 0x746 <malloc>
 2f4:	20 e1       	ldi	r18, 0x10	; 16
 2f6:	fc 01       	movw	r30, r24
 2f8:	11 92       	st	Z+, r1
 2fa:	2a 95       	dec	r18
 2fc:	e9 f7       	brne	.-6      	; 0x2f8 <nRF24L01_init+0xc>
 2fe:	08 95       	ret

00000300 <nRF24L01_send_command>:
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
 306:	da 01       	movw	r26, r20
 308:	e8 81       	ld	r30, Y
 30a:	f9 81       	ldd	r31, Y+1	; 0x01
 30c:	50 81       	ld	r21, Z
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0a 80       	ldd	r0, Y+2	; 0x02
 314:	02 c0       	rjmp	.+4      	; 0x31a <nRF24L01_send_command+0x1a>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <nRF24L01_send_command+0x16>
 31e:	80 95       	com	r24
 320:	85 23       	and	r24, r21
 322:	80 83       	st	Z, r24
 324:	6e bd       	out	0x2e, r22	; 46
 326:	0d b4       	in	r0, 0x2d	; 45
 328:	07 fe       	sbrs	r0, 7
 32a:	fd cf       	rjmp	.-6      	; 0x326 <nRF24L01_send_command+0x26>
 32c:	8e b5       	in	r24, 0x2e	; 46
 32e:	8f 87       	std	Y+15, r24	; 0x0f
 330:	21 15       	cp	r18, r1
 332:	31 05       	cpc	r19, r1
 334:	79 f0       	breq	.+30     	; 0x354 <nRF24L01_send_command+0x54>
 336:	fd 01       	movw	r30, r26
 338:	2a 0f       	add	r18, r26
 33a:	3b 1f       	adc	r19, r27
 33c:	df 01       	movw	r26, r30
 33e:	90 81       	ld	r25, Z
 340:	9e bd       	out	0x2e, r25	; 46
 342:	0d b4       	in	r0, 0x2d	; 45
 344:	07 fe       	sbrs	r0, 7
 346:	fd cf       	rjmp	.-6      	; 0x342 <nRF24L01_send_command+0x42>
 348:	9e b5       	in	r25, 0x2e	; 46
 34a:	9c 93       	st	X, r25
 34c:	31 96       	adiw	r30, 0x01	; 1
 34e:	e2 17       	cp	r30, r18
 350:	f3 07       	cpc	r31, r19
 352:	a1 f7       	brne	.-24     	; 0x33c <nRF24L01_send_command+0x3c>
 354:	e8 81       	ld	r30, Y
 356:	f9 81       	ldd	r31, Y+1	; 0x01
 358:	20 81       	ld	r18, Z
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0a 80       	ldd	r0, Y+2	; 0x02
 360:	02 c0       	rjmp	.+4      	; 0x366 <nRF24L01_send_command+0x66>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	0a 94       	dec	r0
 368:	e2 f7       	brpl	.-8      	; 0x362 <nRF24L01_send_command+0x62>
 36a:	82 2b       	or	r24, r18
 36c:	80 83       	st	Z, r24
 36e:	8f 85       	ldd	r24, Y+15	; 0x0f
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <nRF24L01_write_register>:
 376:	60 62       	ori	r22, 0x20	; 32
 378:	0e 94 80 01 	call	0x300	; 0x300 <nRF24L01_send_command>
 37c:	08 95       	ret

0000037e <nRF24L01_read_register>:
 37e:	0e 94 80 01 	call	0x300	; 0x300 <nRF24L01_send_command>
 382:	08 95       	ret

00000384 <nRF24L01_no_op>:
 384:	20 e0       	ldi	r18, 0x00	; 0
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	6f ef       	ldi	r22, 0xFF	; 255
 38e:	0e 94 80 01 	call	0x300	; 0x300 <nRF24L01_send_command>
 392:	08 95       	ret

00000394 <nRF24L01_update_status>:
 394:	0e 94 c2 01 	call	0x384	; 0x384 <nRF24L01_no_op>
 398:	08 95       	ret

0000039a <nRF24L01_flush_transmit_message>:
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	61 ee       	ldi	r22, 0xE1	; 225
 3a4:	0e 94 80 01 	call	0x300	; 0x300 <nRF24L01_send_command>
 3a8:	08 95       	ret

000003aa <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	1f 92       	push	r1
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
 3b4:	20 e7       	ldi	r18, 0x70	; 112
 3b6:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	ae 01       	movw	r20, r28
 3be:	4f 5f       	subi	r20, 0xFF	; 255
 3c0:	5f 4f       	sbci	r21, 0xFF	; 255
 3c2:	67 e0       	ldi	r22, 0x07	; 7
 3c4:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>
}
 3c8:	0f 90       	pop	r0
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
 3d0:	ff 92       	push	r15
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	1f 92       	push	r1
 3dc:	cd b7       	in	r28, 0x3d	; 61
 3de:	de b7       	in	r29, 0x3e	; 62
 3e0:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 3e2:	dc 01       	movw	r26, r24
 3e4:	ed 91       	ld	r30, X+
 3e6:	fc 91       	ld	r31, X
 3e8:	11 97       	sbiw	r26, 0x01	; 1
 3ea:	42 91       	ld	r20, -Z
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	9c 01       	movw	r18, r24
 3f2:	12 96       	adiw	r26, 0x02	; 2
 3f4:	0c 90       	ld	r0, X
 3f6:	12 97       	sbiw	r26, 0x02	; 2
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <nRF24L01_begin+0x2e>
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <nRF24L01_begin+0x2a>
 402:	24 2b       	or	r18, r20
 404:	20 83       	st	Z, r18
 406:	13 96       	adiw	r26, 0x03	; 3
 408:	ed 91       	ld	r30, X+
 40a:	fc 91       	ld	r31, X
 40c:	14 97       	sbiw	r26, 0x04	; 4
 40e:	42 91       	ld	r20, -Z
 410:	9c 01       	movw	r18, r24
 412:	15 96       	adiw	r26, 0x05	; 5
 414:	0c 90       	ld	r0, X
 416:	15 97       	sbiw	r26, 0x05	; 5
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	24 2b       	or	r18, r20
 424:	20 83       	st	Z, r18
 426:	ed 91       	ld	r30, X+
 428:	fc 91       	ld	r31, X
 42a:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 42c:	40 81       	ld	r20, Z
 42e:	9c 01       	movw	r18, r24
 430:	12 96       	adiw	r26, 0x02	; 2
 432:	0c 90       	ld	r0, X
 434:	12 97       	sbiw	r26, 0x02	; 2
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	22 0f       	add	r18, r18
 43a:	33 1f       	adc	r19, r19
 43c:	0a 94       	dec	r0
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	24 2b       	or	r18, r20
 442:	20 83       	st	Z, r18
 444:	13 96       	adiw	r26, 0x03	; 3
 446:	ed 91       	ld	r30, X+
 448:	fc 91       	ld	r31, X
 44a:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 44c:	30 81       	ld	r19, Z
 44e:	ac 01       	movw	r20, r24
 450:	15 96       	adiw	r26, 0x05	; 5
 452:	0c 90       	ld	r0, X
 454:	15 97       	sbiw	r26, 0x05	; 5
 456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 460:	24 2f       	mov	r18, r20
 462:	20 95       	com	r18
 464:	23 23       	and	r18, r19
 466:	20 83       	st	Z, r18
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
 468:	2c b5       	in	r18, 0x2c	; 44
 46a:	20 61       	ori	r18, 0x10	; 16
 46c:	2c bd       	out	0x2c, r18	; 44
    // enable SPI
    SPCR |= _BV(SPE);
 46e:	2c b5       	in	r18, 0x2c	; 44
 470:	20 64       	ori	r18, 0x40	; 64
 472:	2c bd       	out	0x2c, r18	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 474:	16 96       	adiw	r26, 0x06	; 6
 476:	ed 91       	ld	r30, X+
 478:	fc 91       	ld	r31, X
 47a:	17 97       	sbiw	r26, 0x07	; 7
 47c:	42 91       	ld	r20, -Z
 47e:	9c 01       	movw	r18, r24
 480:	18 96       	adiw	r26, 0x08	; 8
 482:	0c 90       	ld	r0, X
 484:	18 97       	sbiw	r26, 0x08	; 8
 486:	02 c0       	rjmp	.+4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 488:	22 0f       	add	r18, r18
 48a:	33 1f       	adc	r19, r19
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 490:	24 2b       	or	r18, r20
 492:	20 83       	st	Z, r18
 494:	19 96       	adiw	r26, 0x09	; 9
 496:	ed 91       	ld	r30, X+
 498:	fc 91       	ld	r31, X
 49a:	1a 97       	sbiw	r26, 0x0a	; 10
 49c:	42 91       	ld	r20, -Z
 49e:	9c 01       	movw	r18, r24
 4a0:	1b 96       	adiw	r26, 0x0b	; 11
 4a2:	0c 90       	ld	r0, X
 4a4:	1b 97       	sbiw	r26, 0x0b	; 11
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	0a 94       	dec	r0
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4b0:	24 2b       	or	r18, r20
 4b2:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
 4b4:	1c 96       	adiw	r26, 0x0c	; 12
 4b6:	ed 91       	ld	r30, X+
 4b8:	fc 91       	ld	r31, X
 4ba:	1d 97       	sbiw	r26, 0x0d	; 13
 4bc:	22 91       	ld	r18, -Z
 4be:	1e 96       	adiw	r26, 0x0e	; 14
 4c0:	0c 90       	ld	r0, X
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4cc:	80 95       	com	r24
 4ce:	82 23       	and	r24, r18
 4d0:	80 83       	st	Z, r24
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
 4d2:	8c b5       	in	r24, 0x2c	; 44
 4d4:	87 7f       	andi	r24, 0xF7	; 247
 4d6:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
 4d8:	8c b5       	in	r24, 0x2c	; 44
 4da:	8b 7f       	andi	r24, 0xFB	; 251
 4dc:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
 4de:	8c b5       	in	r24, 0x2c	; 44
 4e0:	8e 7f       	andi	r24, 0xFE	; 254
 4e2:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
 4e4:	8c b5       	in	r24, 0x2c	; 44
 4e6:	8d 7f       	andi	r24, 0xFD	; 253
 4e8:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
 4ea:	8d b5       	in	r24, 0x2d	; 45
 4ec:	81 60       	ori	r24, 0x01	; 1
 4ee:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
 4f0:	8c b5       	in	r24, 0x2c	; 44
 4f2:	8f 7d       	andi	r24, 0xDF	; 223
 4f4:	8c bd       	out	0x2c, r24	; 44
    set_high(rf->ss);
    set_low(rf->ce);

    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	62 ee       	ldi	r22, 0xE2	; 226
 500:	c8 01       	movw	r24, r16
 502:	0e 94 80 01 	call	0x300	; 0x300 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	61 ee       	ldi	r22, 0xE1	; 225
 510:	c8 01       	movw	r24, r16
 512:	0e 94 80 01 	call	0x300	; 0x300 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
 516:	c8 01       	movw	r24, r16
 518:	0e 94 d5 01 	call	0x3aa	; 0x3aa <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
 51c:	8f e0       	ldi	r24, 0x0F	; 15
 51e:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	ae 01       	movw	r20, r28
 526:	4f 5f       	subi	r20, 0xFF	; 255
 528:	5f 4f       	sbci	r21, 0xFF	; 255
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	c8 01       	movw	r24, r16
 52e:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
 532:	0f 2e       	mov	r0, r31
 534:	ff e3       	ldi	r31, 0x3F	; 63
 536:	ff 2e       	mov	r15, r31
 538:	f0 2d       	mov	r31, r0
 53a:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	ae 01       	movw	r20, r28
 542:	4f 5f       	subi	r20, 0xFF	; 255
 544:	5f 4f       	sbci	r21, 0xFF	; 255
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	c8 01       	movw	r24, r16
 54a:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>

    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
 54e:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	ae 01       	movw	r20, r28
 556:	4f 5f       	subi	r20, 0xFF	; 255
 558:	5f 4f       	sbci	r21, 0xFF	; 255
 55a:	6c e1       	ldi	r22, 0x1C	; 28
 55c:	c8 01       	movw	r24, r16
 55e:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	ae 01       	movw	r20, r28
 56c:	4f 5f       	subi	r20, 0xFF	; 255
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	6d e1       	ldi	r22, 0x1D	; 29
 572:	c8 01       	movw	r24, r16
 574:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>

    // disable all rx addresses
    data = 0;
 578:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	ae 01       	movw	r20, r28
 580:	4f 5f       	subi	r20, 0xFF	; 255
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	62 e0       	ldi	r22, 0x02	; 2
 586:	c8 01       	movw	r24, r16
 588:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>
}
 58c:	0f 90       	pop	r0
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	ff 90       	pop	r15
 598:	08 95       	ret

0000059a <nRF24L01_clear_transmit_interrupts>:
void nRF24L01_clear_interrupts(nRF24L01 *rf) {
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	1f 92       	push	r1
 5a0:	cd b7       	in	r28, 0x3d	; 61
 5a2:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
 5a4:	20 e3       	ldi	r18, 0x30	; 48
 5a6:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 5a8:	21 e0       	ldi	r18, 0x01	; 1
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	ae 01       	movw	r20, r28
 5ae:	4f 5f       	subi	r20, 0xFF	; 255
 5b0:	5f 4f       	sbci	r21, 0xFF	; 255
 5b2:	67 e0       	ldi	r22, 0x07	; 7
 5b4:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>
}
 5b8:	0f 90       	pop	r0
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <nRF24L01_transmit>:
int nRF24L01_pipe_number_received(nRF24L01 *rf) {
    int pipe_number = (rf->status & RX_P_NO_MASK) >> 1;
    return pipe_number <= 5 ? pipe_number : -1;
}

void nRF24L01_transmit(nRF24L01 *rf, void *address, nRF24L01Message *msg) {
 5c0:	cf 92       	push	r12
 5c2:	df 92       	push	r13
 5c4:	ef 92       	push	r14
 5c6:	ff 92       	push	r15
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <nRF24L01_transmit+0x12>
 5d2:	00 d0       	rcall	.+0      	; 0x5d4 <nRF24L01_transmit+0x14>
 5d4:	00 d0       	rcall	.+0      	; 0x5d6 <nRF24L01_transmit+0x16>
 5d6:	cd b7       	in	r28, 0x3d	; 61
 5d8:	de b7       	in	r29, 0x3e	; 62
 5da:	8c 01       	movw	r16, r24
 5dc:	6b 01       	movw	r12, r22
 5de:	7a 01       	movw	r14, r20
    nRF24L01_clear_transmit_interrupts(rf);
 5e0:	0e 94 cd 02 	call	0x59a	; 0x59a <nRF24L01_clear_transmit_interrupts>
    uint8_t addr[5];
    copy_address((uint8_t *)address, addr);
 5e4:	be 01       	movw	r22, r28
 5e6:	6f 5f       	subi	r22, 0xFF	; 255
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	c6 01       	movw	r24, r12
 5ec:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <copy_address>
    nRF24L01_write_register(rf, TX_ADDR, addr, 5);
 5f0:	25 e0       	ldi	r18, 0x05	; 5
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	ae 01       	movw	r20, r28
 5f6:	4f 5f       	subi	r20, 0xFF	; 255
 5f8:	5f 4f       	sbci	r21, 0xFF	; 255
 5fa:	60 e1       	ldi	r22, 0x10	; 16
 5fc:	c8 01       	movw	r24, r16
 5fe:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>
    copy_address((uint8_t *)address, addr);
 602:	be 01       	movw	r22, r28
 604:	6f 5f       	subi	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	c6 01       	movw	r24, r12
 60a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <copy_address>
    nRF24L01_write_register(rf, RX_ADDR_P0, addr, 5);
 60e:	25 e0       	ldi	r18, 0x05	; 5
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	ae 01       	movw	r20, r28
 614:	4f 5f       	subi	r20, 0xFF	; 255
 616:	5f 4f       	sbci	r21, 0xFF	; 255
 618:	6a e0       	ldi	r22, 0x0A	; 10
 61a:	c8 01       	movw	r24, r16
 61c:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>
    nRF24L01_send_command(rf, W_TX_PAYLOAD, &msg->data, msg->length);
 620:	d7 01       	movw	r26, r14
 622:	92 96       	adiw	r26, 0x22	; 34
 624:	2c 91       	ld	r18, X
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	a7 01       	movw	r20, r14
 62a:	4e 5f       	subi	r20, 0xFE	; 254
 62c:	5f 4f       	sbci	r21, 0xFF	; 255
 62e:	60 ea       	ldi	r22, 0xA0	; 160
 630:	c8 01       	movw	r24, r16
 632:	0e 94 80 01 	call	0x300	; 0x300 <nRF24L01_send_command>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
 636:	21 e0       	ldi	r18, 0x01	; 1
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	ae 01       	movw	r20, r28
 63c:	4a 5f       	subi	r20, 0xFA	; 250
 63e:	5f 4f       	sbci	r21, 0xFF	; 255
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	c8 01       	movw	r24, r16
 644:	0e 94 bf 01 	call	0x37e	; 0x37e <nRF24L01_read_register>
    config &= ~_BV(PRIM_RX);
 648:	8e 81       	ldd	r24, Y+6	; 0x06
 64a:	8e 7f       	andi	r24, 0xFE	; 254
 64c:	8e 83       	std	Y+6, r24	; 0x06
    nRF24L01_write_register(rf, CONFIG, &config, 1);
 64e:	21 e0       	ldi	r18, 0x01	; 1
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	ae 01       	movw	r20, r28
 654:	4a 5f       	subi	r20, 0xFA	; 250
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	c8 01       	movw	r24, r16
 65c:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>
 660:	d8 01       	movw	r26, r16
 662:	13 96       	adiw	r26, 0x03	; 3
 664:	ed 91       	ld	r30, X+
 666:	fc 91       	ld	r31, X
 668:	14 97       	sbiw	r26, 0x04	; 4
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 66a:	20 81       	ld	r18, Z
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	15 96       	adiw	r26, 0x05	; 5
 672:	0c 90       	ld	r0, X
 674:	02 c0       	rjmp	.+4      	; 0x67a <nRF24L01_transmit+0xba>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	0a 94       	dec	r0
 67c:	e2 f7       	brpl	.-8      	; 0x676 <nRF24L01_transmit+0xb6>
 67e:	82 2b       	or	r24, r18
 680:	80 83       	st	Z, r24
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 682:	26 96       	adiw	r28, 0x06	; 6
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	f8 94       	cli
 688:	de bf       	out	0x3e, r29	; 62
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	cd bf       	out	0x3d, r28	; 61
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	1f 91       	pop	r17
 694:	0f 91       	pop	r16
 696:	ff 90       	pop	r15
 698:	ef 90       	pop	r14
 69a:	df 90       	pop	r13
 69c:	cf 90       	pop	r12
 69e:	08 95       	ret

000006a0 <nRF24L01_transmit_success>:

int nRF24L01_transmit_success(nRF24L01 *rf) {
 6a0:	ef 92       	push	r14
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	1f 92       	push	r1
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
 6b2:	8c 01       	movw	r16, r24
 6b4:	dc 01       	movw	r26, r24
 6b6:	13 96       	adiw	r26, 0x03	; 3
 6b8:	ed 91       	ld	r30, X+
 6ba:	fc 91       	ld	r31, X
 6bc:	14 97       	sbiw	r26, 0x04	; 4
inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 6be:	20 81       	ld	r18, Z
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	15 96       	adiw	r26, 0x05	; 5
 6c6:	0c 90       	ld	r0, X
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <nRF24L01_transmit_success+0x2e>
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	0a 94       	dec	r0
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <nRF24L01_transmit_success+0x2a>
 6d2:	80 95       	com	r24
 6d4:	82 23       	and	r24, r18
 6d6:	80 83       	st	Z, r24
    set_high(rf->ce);
}

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
    nRF24L01_update_status(rf);
 6d8:	c8 01       	movw	r24, r16
 6da:	0e 94 ca 01 	call	0x394	; 0x394 <nRF24L01_update_status>
    int success;
    if (rf->status & _BV(TX_DS)) success = 0;
 6de:	f8 01       	movw	r30, r16
 6e0:	87 85       	ldd	r24, Z+15	; 0x0f
 6e2:	85 fd       	sbrc	r24, 5
 6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <nRF24L01_transmit_success+0x58>
    else if (rf->status & _BV(MAX_RT)) success = -1;
 6e6:	84 fd       	sbrc	r24, 4
 6e8:	0a c0       	rjmp	.+20     	; 0x6fe <nRF24L01_transmit_success+0x5e>
    else success = -2;
 6ea:	0f 2e       	mov	r0, r31
 6ec:	fe ef       	ldi	r31, 0xFE	; 254
 6ee:	ef 2e       	mov	r14, r31
 6f0:	ff 24       	eor	r15, r15
 6f2:	fa 94       	dec	r15
 6f4:	f0 2d       	mov	r31, r0
 6f6:	06 c0       	rjmp	.+12     	; 0x704 <nRF24L01_transmit_success+0x64>

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
    nRF24L01_update_status(rf);
    int success;
    if (rf->status & _BV(TX_DS)) success = 0;
 6f8:	e1 2c       	mov	r14, r1
 6fa:	f1 2c       	mov	r15, r1
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <nRF24L01_transmit_success+0x64>
    else if (rf->status & _BV(MAX_RT)) success = -1;
 6fe:	ee 24       	eor	r14, r14
 700:	ea 94       	dec	r14
 702:	fe 2c       	mov	r15, r14
    else success = -2;
    nRF24L01_clear_transmit_interrupts(rf);
 704:	c8 01       	movw	r24, r16
 706:	0e 94 cd 02 	call	0x59a	; 0x59a <nRF24L01_clear_transmit_interrupts>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
 70a:	21 e0       	ldi	r18, 0x01	; 1
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	ae 01       	movw	r20, r28
 710:	4f 5f       	subi	r20, 0xFF	; 255
 712:	5f 4f       	sbci	r21, 0xFF	; 255
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	c8 01       	movw	r24, r16
 718:	0e 94 bf 01 	call	0x37e	; 0x37e <nRF24L01_read_register>
    config |= _BV(PRIM_RX);
 71c:	89 81       	ldd	r24, Y+1	; 0x01
 71e:	81 60       	ori	r24, 0x01	; 1
 720:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &config, 1);
 722:	21 e0       	ldi	r18, 0x01	; 1
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	ae 01       	movw	r20, r28
 728:	4f 5f       	subi	r20, 0xFF	; 255
 72a:	5f 4f       	sbci	r21, 0xFF	; 255
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	c8 01       	movw	r24, r16
 730:	0e 94 bb 01 	call	0x376	; 0x376 <nRF24L01_write_register>
    return success;
}
 734:	c7 01       	movw	r24, r14
 736:	0f 90       	pop	r0
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	ff 90       	pop	r15
 742:	ef 90       	pop	r14
 744:	08 95       	ret

00000746 <malloc>:
 746:	0f 93       	push	r16
 748:	1f 93       	push	r17
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	82 30       	cpi	r24, 0x02	; 2
 750:	91 05       	cpc	r25, r1
 752:	10 f4       	brcc	.+4      	; 0x758 <malloc+0x12>
 754:	82 e0       	ldi	r24, 0x02	; 2
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <__flp>
 75c:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <__flp+0x1>
 760:	20 e0       	ldi	r18, 0x00	; 0
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	a0 e0       	ldi	r26, 0x00	; 0
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	30 97       	sbiw	r30, 0x00	; 0
 76a:	19 f1       	breq	.+70     	; 0x7b2 <malloc+0x6c>
 76c:	40 81       	ld	r20, Z
 76e:	51 81       	ldd	r21, Z+1	; 0x01
 770:	02 81       	ldd	r16, Z+2	; 0x02
 772:	13 81       	ldd	r17, Z+3	; 0x03
 774:	48 17       	cp	r20, r24
 776:	59 07       	cpc	r21, r25
 778:	c8 f0       	brcs	.+50     	; 0x7ac <malloc+0x66>
 77a:	84 17       	cp	r24, r20
 77c:	95 07       	cpc	r25, r21
 77e:	69 f4       	brne	.+26     	; 0x79a <malloc+0x54>
 780:	10 97       	sbiw	r26, 0x00	; 0
 782:	31 f0       	breq	.+12     	; 0x790 <malloc+0x4a>
 784:	12 96       	adiw	r26, 0x02	; 2
 786:	0c 93       	st	X, r16
 788:	12 97       	sbiw	r26, 0x02	; 2
 78a:	13 96       	adiw	r26, 0x03	; 3
 78c:	1c 93       	st	X, r17
 78e:	27 c0       	rjmp	.+78     	; 0x7de <malloc+0x98>
 790:	00 93 11 01 	sts	0x0111, r16	; 0x800111 <__flp>
 794:	10 93 12 01 	sts	0x0112, r17	; 0x800112 <__flp+0x1>
 798:	22 c0       	rjmp	.+68     	; 0x7de <malloc+0x98>
 79a:	21 15       	cp	r18, r1
 79c:	31 05       	cpc	r19, r1
 79e:	19 f0       	breq	.+6      	; 0x7a6 <malloc+0x60>
 7a0:	42 17       	cp	r20, r18
 7a2:	53 07       	cpc	r21, r19
 7a4:	18 f4       	brcc	.+6      	; 0x7ac <malloc+0x66>
 7a6:	9a 01       	movw	r18, r20
 7a8:	bd 01       	movw	r22, r26
 7aa:	ef 01       	movw	r28, r30
 7ac:	df 01       	movw	r26, r30
 7ae:	f8 01       	movw	r30, r16
 7b0:	db cf       	rjmp	.-74     	; 0x768 <malloc+0x22>
 7b2:	21 15       	cp	r18, r1
 7b4:	31 05       	cpc	r19, r1
 7b6:	f9 f0       	breq	.+62     	; 0x7f6 <malloc+0xb0>
 7b8:	28 1b       	sub	r18, r24
 7ba:	39 0b       	sbc	r19, r25
 7bc:	24 30       	cpi	r18, 0x04	; 4
 7be:	31 05       	cpc	r19, r1
 7c0:	80 f4       	brcc	.+32     	; 0x7e2 <malloc+0x9c>
 7c2:	8a 81       	ldd	r24, Y+2	; 0x02
 7c4:	9b 81       	ldd	r25, Y+3	; 0x03
 7c6:	61 15       	cp	r22, r1
 7c8:	71 05       	cpc	r23, r1
 7ca:	21 f0       	breq	.+8      	; 0x7d4 <malloc+0x8e>
 7cc:	fb 01       	movw	r30, r22
 7ce:	93 83       	std	Z+3, r25	; 0x03
 7d0:	82 83       	std	Z+2, r24	; 0x02
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <malloc+0x96>
 7d4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <__flp+0x1>
 7d8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <__flp>
 7dc:	fe 01       	movw	r30, r28
 7de:	32 96       	adiw	r30, 0x02	; 2
 7e0:	44 c0       	rjmp	.+136    	; 0x86a <malloc+0x124>
 7e2:	fe 01       	movw	r30, r28
 7e4:	e2 0f       	add	r30, r18
 7e6:	f3 1f       	adc	r31, r19
 7e8:	81 93       	st	Z+, r24
 7ea:	91 93       	st	Z+, r25
 7ec:	22 50       	subi	r18, 0x02	; 2
 7ee:	31 09       	sbc	r19, r1
 7f0:	39 83       	std	Y+1, r19	; 0x01
 7f2:	28 83       	st	Y, r18
 7f4:	3a c0       	rjmp	.+116    	; 0x86a <malloc+0x124>
 7f6:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <__brkval>
 7fa:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <__brkval+0x1>
 7fe:	23 2b       	or	r18, r19
 800:	41 f4       	brne	.+16     	; 0x812 <malloc+0xcc>
 802:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 806:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 80a:	30 93 10 01 	sts	0x0110, r19	; 0x800110 <__brkval+0x1>
 80e:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <__brkval>
 812:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 816:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 81a:	21 15       	cp	r18, r1
 81c:	31 05       	cpc	r19, r1
 81e:	41 f4       	brne	.+16     	; 0x830 <malloc+0xea>
 820:	2d b7       	in	r18, 0x3d	; 61
 822:	3e b7       	in	r19, 0x3e	; 62
 824:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 828:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 82c:	24 1b       	sub	r18, r20
 82e:	35 0b       	sbc	r19, r21
 830:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <__brkval>
 834:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <__brkval+0x1>
 838:	e2 17       	cp	r30, r18
 83a:	f3 07       	cpc	r31, r19
 83c:	a0 f4       	brcc	.+40     	; 0x866 <malloc+0x120>
 83e:	2e 1b       	sub	r18, r30
 840:	3f 0b       	sbc	r19, r31
 842:	28 17       	cp	r18, r24
 844:	39 07       	cpc	r19, r25
 846:	78 f0       	brcs	.+30     	; 0x866 <malloc+0x120>
 848:	ac 01       	movw	r20, r24
 84a:	4e 5f       	subi	r20, 0xFE	; 254
 84c:	5f 4f       	sbci	r21, 0xFF	; 255
 84e:	24 17       	cp	r18, r20
 850:	35 07       	cpc	r19, r21
 852:	48 f0       	brcs	.+18     	; 0x866 <malloc+0x120>
 854:	4e 0f       	add	r20, r30
 856:	5f 1f       	adc	r21, r31
 858:	50 93 10 01 	sts	0x0110, r21	; 0x800110 <__brkval+0x1>
 85c:	40 93 0f 01 	sts	0x010F, r20	; 0x80010f <__brkval>
 860:	81 93       	st	Z+, r24
 862:	91 93       	st	Z+, r25
 864:	02 c0       	rjmp	.+4      	; 0x86a <malloc+0x124>
 866:	e0 e0       	ldi	r30, 0x00	; 0
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	cf 01       	movw	r24, r30
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	0f 91       	pop	r16
 874:	08 95       	ret

00000876 <free>:
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	00 97       	sbiw	r24, 0x00	; 0
 87c:	09 f4       	brne	.+2      	; 0x880 <free+0xa>
 87e:	81 c0       	rjmp	.+258    	; 0x982 <__stack+0x83>
 880:	fc 01       	movw	r30, r24
 882:	32 97       	sbiw	r30, 0x02	; 2
 884:	13 82       	std	Z+3, r1	; 0x03
 886:	12 82       	std	Z+2, r1	; 0x02
 888:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <__flp>
 88c:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <__flp+0x1>
 890:	10 97       	sbiw	r26, 0x00	; 0
 892:	81 f4       	brne	.+32     	; 0x8b4 <free+0x3e>
 894:	20 81       	ld	r18, Z
 896:	31 81       	ldd	r19, Z+1	; 0x01
 898:	82 0f       	add	r24, r18
 89a:	93 1f       	adc	r25, r19
 89c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <__brkval>
 8a0:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <__brkval+0x1>
 8a4:	28 17       	cp	r18, r24
 8a6:	39 07       	cpc	r19, r25
 8a8:	51 f5       	brne	.+84     	; 0x8fe <free+0x88>
 8aa:	f0 93 10 01 	sts	0x0110, r31	; 0x800110 <__brkval+0x1>
 8ae:	e0 93 0f 01 	sts	0x010F, r30	; 0x80010f <__brkval>
 8b2:	67 c0       	rjmp	.+206    	; 0x982 <__stack+0x83>
 8b4:	ed 01       	movw	r28, r26
 8b6:	20 e0       	ldi	r18, 0x00	; 0
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	ce 17       	cp	r28, r30
 8bc:	df 07       	cpc	r29, r31
 8be:	40 f4       	brcc	.+16     	; 0x8d0 <free+0x5a>
 8c0:	4a 81       	ldd	r20, Y+2	; 0x02
 8c2:	5b 81       	ldd	r21, Y+3	; 0x03
 8c4:	9e 01       	movw	r18, r28
 8c6:	41 15       	cp	r20, r1
 8c8:	51 05       	cpc	r21, r1
 8ca:	f1 f0       	breq	.+60     	; 0x908 <__stack+0x9>
 8cc:	ea 01       	movw	r28, r20
 8ce:	f5 cf       	rjmp	.-22     	; 0x8ba <free+0x44>
 8d0:	d3 83       	std	Z+3, r29	; 0x03
 8d2:	c2 83       	std	Z+2, r28	; 0x02
 8d4:	40 81       	ld	r20, Z
 8d6:	51 81       	ldd	r21, Z+1	; 0x01
 8d8:	84 0f       	add	r24, r20
 8da:	95 1f       	adc	r25, r21
 8dc:	c8 17       	cp	r28, r24
 8de:	d9 07       	cpc	r29, r25
 8e0:	59 f4       	brne	.+22     	; 0x8f8 <free+0x82>
 8e2:	88 81       	ld	r24, Y
 8e4:	99 81       	ldd	r25, Y+1	; 0x01
 8e6:	84 0f       	add	r24, r20
 8e8:	95 1f       	adc	r25, r21
 8ea:	02 96       	adiw	r24, 0x02	; 2
 8ec:	91 83       	std	Z+1, r25	; 0x01
 8ee:	80 83       	st	Z, r24
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	9b 81       	ldd	r25, Y+3	; 0x03
 8f4:	93 83       	std	Z+3, r25	; 0x03
 8f6:	82 83       	std	Z+2, r24	; 0x02
 8f8:	21 15       	cp	r18, r1
 8fa:	31 05       	cpc	r19, r1
 8fc:	29 f4       	brne	.+10     	; 0x908 <__stack+0x9>
 8fe:	f0 93 12 01 	sts	0x0112, r31	; 0x800112 <__flp+0x1>
 902:	e0 93 11 01 	sts	0x0111, r30	; 0x800111 <__flp>
 906:	3d c0       	rjmp	.+122    	; 0x982 <__stack+0x83>
 908:	e9 01       	movw	r28, r18
 90a:	fb 83       	std	Y+3, r31	; 0x03
 90c:	ea 83       	std	Y+2, r30	; 0x02
 90e:	49 91       	ld	r20, Y+
 910:	59 91       	ld	r21, Y+
 912:	c4 0f       	add	r28, r20
 914:	d5 1f       	adc	r29, r21
 916:	ec 17       	cp	r30, r28
 918:	fd 07       	cpc	r31, r29
 91a:	61 f4       	brne	.+24     	; 0x934 <__stack+0x35>
 91c:	80 81       	ld	r24, Z
 91e:	91 81       	ldd	r25, Z+1	; 0x01
 920:	84 0f       	add	r24, r20
 922:	95 1f       	adc	r25, r21
 924:	02 96       	adiw	r24, 0x02	; 2
 926:	e9 01       	movw	r28, r18
 928:	99 83       	std	Y+1, r25	; 0x01
 92a:	88 83       	st	Y, r24
 92c:	82 81       	ldd	r24, Z+2	; 0x02
 92e:	93 81       	ldd	r25, Z+3	; 0x03
 930:	9b 83       	std	Y+3, r25	; 0x03
 932:	8a 83       	std	Y+2, r24	; 0x02
 934:	e0 e0       	ldi	r30, 0x00	; 0
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	12 96       	adiw	r26, 0x02	; 2
 93a:	8d 91       	ld	r24, X+
 93c:	9c 91       	ld	r25, X
 93e:	13 97       	sbiw	r26, 0x03	; 3
 940:	00 97       	sbiw	r24, 0x00	; 0
 942:	19 f0       	breq	.+6      	; 0x94a <__stack+0x4b>
 944:	fd 01       	movw	r30, r26
 946:	dc 01       	movw	r26, r24
 948:	f7 cf       	rjmp	.-18     	; 0x938 <__stack+0x39>
 94a:	8d 91       	ld	r24, X+
 94c:	9c 91       	ld	r25, X
 94e:	11 97       	sbiw	r26, 0x01	; 1
 950:	9d 01       	movw	r18, r26
 952:	2e 5f       	subi	r18, 0xFE	; 254
 954:	3f 4f       	sbci	r19, 0xFF	; 255
 956:	82 0f       	add	r24, r18
 958:	93 1f       	adc	r25, r19
 95a:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <__brkval>
 95e:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <__brkval+0x1>
 962:	28 17       	cp	r18, r24
 964:	39 07       	cpc	r19, r25
 966:	69 f4       	brne	.+26     	; 0x982 <__stack+0x83>
 968:	30 97       	sbiw	r30, 0x00	; 0
 96a:	29 f4       	brne	.+10     	; 0x976 <__stack+0x77>
 96c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__flp+0x1>
 970:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__flp>
 974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x7b>
 976:	13 82       	std	Z+3, r1	; 0x03
 978:	12 82       	std	Z+2, r1	; 0x02
 97a:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <__brkval+0x1>
 97e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <__brkval>
 982:	df 91       	pop	r29
 984:	cf 91       	pop	r28
 986:	08 95       	ret

00000988 <memcpy>:
 988:	fb 01       	movw	r30, r22
 98a:	dc 01       	movw	r26, r24
 98c:	02 c0       	rjmp	.+4      	; 0x992 <memcpy+0xa>
 98e:	01 90       	ld	r0, Z+
 990:	0d 92       	st	X+, r0
 992:	41 50       	subi	r20, 0x01	; 1
 994:	50 40       	sbci	r21, 0x00	; 0
 996:	d8 f7       	brcc	.-10     	; 0x98e <memcpy+0x6>
 998:	08 95       	ret

0000099a <__itoa_ncheck>:
 99a:	bb 27       	eor	r27, r27
 99c:	4a 30       	cpi	r20, 0x0A	; 10
 99e:	31 f4       	brne	.+12     	; 0x9ac <__itoa_ncheck+0x12>
 9a0:	99 23       	and	r25, r25
 9a2:	22 f4       	brpl	.+8      	; 0x9ac <__itoa_ncheck+0x12>
 9a4:	bd e2       	ldi	r27, 0x2D	; 45
 9a6:	90 95       	com	r25
 9a8:	81 95       	neg	r24
 9aa:	9f 4f       	sbci	r25, 0xFF	; 255
 9ac:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__utoa_common>

000009b0 <__utoa_ncheck>:
 9b0:	bb 27       	eor	r27, r27

000009b2 <__utoa_common>:
 9b2:	fb 01       	movw	r30, r22
 9b4:	55 27       	eor	r21, r21
 9b6:	aa 27       	eor	r26, r26
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	aa 1f       	adc	r26, r26
 9be:	a4 17       	cp	r26, r20
 9c0:	10 f0       	brcs	.+4      	; 0x9c6 <__utoa_common+0x14>
 9c2:	a4 1b       	sub	r26, r20
 9c4:	83 95       	inc	r24
 9c6:	50 51       	subi	r21, 0x10	; 16
 9c8:	b9 f7       	brne	.-18     	; 0x9b8 <__utoa_common+0x6>
 9ca:	a0 5d       	subi	r26, 0xD0	; 208
 9cc:	aa 33       	cpi	r26, 0x3A	; 58
 9ce:	08 f0       	brcs	.+2      	; 0x9d2 <__utoa_common+0x20>
 9d0:	a9 5d       	subi	r26, 0xD9	; 217
 9d2:	a1 93       	st	Z+, r26
 9d4:	00 97       	sbiw	r24, 0x00	; 0
 9d6:	79 f7       	brne	.-34     	; 0x9b6 <__utoa_common+0x4>
 9d8:	b1 11       	cpse	r27, r1
 9da:	b1 93       	st	Z+, r27
 9dc:	11 92       	st	Z+, r1
 9de:	cb 01       	movw	r24, r22
 9e0:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <strrev>

000009e4 <strrev>:
 9e4:	dc 01       	movw	r26, r24
 9e6:	fc 01       	movw	r30, r24
 9e8:	67 2f       	mov	r22, r23
 9ea:	71 91       	ld	r23, Z+
 9ec:	77 23       	and	r23, r23
 9ee:	e1 f7       	brne	.-8      	; 0x9e8 <strrev+0x4>
 9f0:	32 97       	sbiw	r30, 0x02	; 2
 9f2:	04 c0       	rjmp	.+8      	; 0x9fc <strrev+0x18>
 9f4:	7c 91       	ld	r23, X
 9f6:	6d 93       	st	X+, r22
 9f8:	70 83       	st	Z, r23
 9fa:	62 91       	ld	r22, -Z
 9fc:	ae 17       	cp	r26, r30
 9fe:	bf 07       	cpc	r27, r31
 a00:	c8 f3       	brcs	.-14     	; 0x9f4 <strrev+0x10>
 a02:	08 95       	ret

00000a04 <_exit>:
 a04:	f8 94       	cli

00000a06 <__stop_program>:
 a06:	ff cf       	rjmp	.-2      	; 0xa06 <__stop_program>
